public static Document getDocument(String url) throws IOException {
        return Jsoup.connect(url)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36")
                .header("Accept-Language", "*")
                .get();
    }

    public static void main(String[] args) {

        String url1 = "https://www.scrapingcourse.com/ecommerce/";
        String url = "https://finance.yahoo.com/";
        try {
            Document document = getDocument(url);
            System.out.println(document.body());

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

-----
package uz.trading;

import uz.trading.service.ProductService;

public class Main {

//    @Scheduled(fixedRate = 3000)
//    public static void scrapeProductPage(List<Product> products, Set<String> pageDiscovered, List<String> pageToScrap) {
//        if (!pageToScrap.isEmpty()) {
//            String url = pageToScrap.remove(0);
//
//            pageDiscovered.add(url);
//
//            Document doc;
//            try {
//                doc = Jsoup
//                        .connect("https://www.scrapingcourse.com/ecommerce/")
//                        .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36")
//                        .header("Accept-Language", "*")
//                        .post();
//            }catch (IOException e) {
//                throw new RuntimeException();
//            }
//
//            Elements productElements = doc.select("li.product");
//
//            for (Element productElement : productElements) {
//                Product product = new Product();
//
//                product.setUrl(Objects.requireNonNull(productElement.selectFirst("a")).attr("href"));
//                product.setImage(Objects.requireNonNull(productElement.selectFirst("img")).attr("src"));
//                product.setName(Objects.requireNonNull(productElement.selectFirst("h2")).text());
//                product.setPrice(Objects.requireNonNull(productElement.selectFirst("span")).text());
//
////                products.add(product);
//            }
//
//            products.toString();
//            System.out.println(products);
//
////            Elements paginationElements = doc.select("a.page-numbers");
////            for (Element paginationElement : paginationElements) {
////                String pageUrl = paginationElement.attr("href");
////                if (!pageDiscovered.contains(pageUrl) && !pageToScrap.contains(pageUrl)) {
////                    pageToScrap.add(pageUrl);
////                }
////
////                pageDiscovered.add(pageUrl);
////            }
////
////            System.out.println(url + " -> page scraped");
//        }
//    }

//    public static void main(String[] args)  {
//        ProductService productService = new ProductService()
//        List<Product> products = Collections.synchronizedList(new ArrayList<>());
//
//        Set<String> pageDiscovered = Collections.synchronizedSet(new HashSet<>());
//
//        List<String> pageToScrap = Collections.synchronizedList(new ArrayList<>());
//
//        pageToScrap.add("https://www.scrapingcourse.com/ecommerce/page/1/");
//
//        ExecutorService executorService = Executors.newFixedThreadPool(4);

//        List<Product> products = new ArrayList<>();
//
//        Set<String> pageDiscovered = new HashSet<>();
//
//        List<String> pageToScrap = new ArrayList<>();
//
//        scrapeProductPage(products, pageDiscovered, pageToScrap);
//
//        int i = 1;
//        int limit = 12;
//
//        while (!pageToScrap.isEmpty() && i < limit) {
//            executorService.execute(() -> scrapeProductPage(products, pageDiscovered, pageToScrap));
//
//            TimeUnit.MILLISECONDS.sleep(3000);
//
//            i++;
//        }
//
//        executorService.shutdown();
//        executorService.awaitTermination(300, TimeUnit.SECONDS);
//
//        System.out.println(products.size());
//    }
}
-----

1) 2 ta API chiqarish kerak
2) Date, Price, Open and Volume